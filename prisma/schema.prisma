// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String
  role      UserRole
  status    UserStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  admin     Admin?
  vendor    Vendor?
  customer  Customer?

  @@map("users")
}

model Admin {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  name         String
  profileImage String?
  phone        String
  address      String
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("admins")
}

model Vendor {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  name          String
  phone         String
  logo          String
  description   String
  location      String
  isBlacklisted Boolean        @default(false)
  isDeleted     Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [email], references: [email])
  product       Product[]
  vendorReview  VendorReview[]
  vendorFollow  VendorFollow[]
  urder         Order[]

  @@map("vendors")
}

model Customer {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  name         String
  profileImage String?
  phone        String
  address      String
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User           @relation(fields: [email], references: [email])
  Review       Review[]
  vendorFollow VendorFollow[]
  order        Order[]

  @@map("customers")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  image     String
  isDeleted Boolean   @default(false)
  product   Product[]

  @@map("categories")
}

model Product {
  id            Int             @id @default(autoincrement())
  name          String
  description   String
  categoryId    Int
  category      Category        @relation(fields: [categoryId], references: [id])
  vendorId      Int
  vendor        Vendor          @relation(fields: [vendorId], references: [id])
  inventorCount Int
  images        String[]
  discount      Int             @default(0)
  price         Int
  isDeleted     Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  productReview ProductReview[]
  orderProduct  OrderProduct[]
  cuponProduct  CuponProduct[]

  @@map("products")
}

model Review {
  id            Int             @id @default(autoincrement())
  customerId    Int
  customer      Customer        @relation(fields: [customerId], references: [id])
  description   String
  ratings       Int
  isDeleted     Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  productReview ProductReview[]
  vendorReview  VendorReview[]

  @@map("reviews")
}

model ProductReview {
  id       Int    @id @default(autoincrement())
  reviewId Int
  review   Review @relation(fields: [reviewId], references: [id])

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  // @@id([reviewId, productId])
  @@map("productReviews")
}

model VendorReview {
  id       Int    @id @default(autoincrement())
  reviewId Int
  review   Review @relation(fields: [reviewId], references: [id])

  vendorId Int
  vendor   Vendor @relation(fields: [vendorId], references: [id])

  // @@id([reviewId, vendorId])
  @@map("vendorReviews")
}

model VendorFollow {
  vendorId Int
  vendor   Vendor @relation(fields: [vendorId], references: [id])

  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id])

  @@id([vendorId, customerId])
}

model Order {
  id         Int      @id @default(autoincrement())
  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id])

  vendorId Int
  vendor   Vendor @relation(fields: [vendorId], references: [id])

  totalQunatity   Int
  totalPrice      Int
  customerName    String
  customerEmail   String
  customerAddress String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  orderProduct    OrderProduct[]
  payment         Payment?
}

model OrderProduct {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
}

model Payment {
  id            Int           @id @default(autoincrement())
  orderId       Int           @unique
  order         Order         @relation(fields: [orderId], references: [id])
  paymentStatus PaymentStatus
  transactionId String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Cupon {
  id             Int            @id @default(autoincrement())
  code           String         @unique
  discountAmount Int
  isActive       Boolean
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  cuponProduct   CuponProduct[]
}

model CuponProduct {
  id        Int @id @default(autoincrement())
  productId Int
  cuponId   Int

  product Product @relation(fields: [productId], references: [id])
  cupon   Cupon   @relation(fields: [cuponId], references: [id])
}

model NewsLetter {
  id    Int @id @default(autoincrement())
  email String @unique

  @@map("newsLetters")
}

enum PaymentStatus {
  PENDING
  FAILED
  SUCCESS
  CANCELED
}

enum UserRole {
  ADMIN
  CUSTOMER
  VENDOR
}

enum UserStatus {
  PENDING
  ACTIVE
  BLOCKED
}
